# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import grpc_api.codegen.organization_pb2 as organization__pb2

from database.sqlite import get_session
from controllers.organizations import OrganizationController


class OrganizationServiceStub(object):
    """Services
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOrganizationsAsList = channel.unary_unary(
                '/OrganizationService/GetOrganizationsAsList',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=organization__pb2.OrganizationResponseList.FromString,
                )
        self.GetOrganizationsAsStream = channel.unary_stream(
                '/OrganizationService/GetOrganizationsAsStream',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=organization__pb2.OrganizationResponse.FromString,
                )
        self.GetOrganizationById = channel.unary_unary(
                '/OrganizationService/GetOrganizationById',
                request_serializer=organization__pb2.GetOrganizationByIdRequest.SerializeToString,
                response_deserializer=organization__pb2.OrganizationResponse.FromString,
                )
        self.CreateOrganization = channel.unary_unary(
                '/OrganizationService/CreateOrganization',
                request_serializer=organization__pb2.CreateOrganizationRequest.SerializeToString,
                response_deserializer=organization__pb2.OrganizationResponse.FromString,
                )
        self.UpdateOrganization = channel.unary_unary(
                '/OrganizationService/UpdateOrganization',
                request_serializer=organization__pb2.UpdateOrganizationRequest.SerializeToString,
                response_deserializer=organization__pb2.OrganizationResponse.FromString,
                )
        self.DeleteOrganization = channel.unary_unary(
                '/OrganizationService/DeleteOrganization',
                request_serializer=organization__pb2.DeleteOrganizationRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.FindOrganization = channel.unary_stream(
                '/OrganizationService/FindOrganization',
                request_serializer=organization__pb2.FindOrganizationRequest.SerializeToString,
                response_deserializer=organization__pb2.OrganizationResponse.FromString,
                )


class OrganizationServiceServicer(object):
    """Services
    """

    def GetOrganizationsAsList(self, request, context):
        session = next(get_session())
        with session:
            controller = OrganizationController(session)
            organizations = controller.get_all_organizations()
            context.set_code(grpc.StatusCode.OK)
            orgs = [organization__pb2.OrganizationResponse(**org._asdict()) for org in organizations]
            return organization__pb2.OrganizationResponseList(organizations=orgs)

    def GetOrganizationsAsStream(self, request, context):
        session = next(get_session())
        with session:
            controller = OrganizationController(session)
            context.set_code(grpc.StatusCode.OK)
            for org in controller.get_all_organizations():
                yield organization__pb2.OrganizationResponse(**org._asdict())

    def GetOrganizationById(self, request, context):
        session = next(get_session())
        with session:
            org = OrganizationController(session).get_organization_by_id(request.id)
            if org is not None:
                context.set_code(grpc.StatusCode.OK)
                return organization__pb2.OrganizationResponse(**org._asdict())
            else:
                context.set_code(grpc.StatusCode.NOT_FOUND)
                context.set_details(f"Organization {request.id} not found!")
                return organization__pb2.OrganizationResponse() # empty


    def CreateOrganization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        session = next(get_session())
        with session:
            controller = OrganizationController(session)
            org = controller.create_organization(
                name=request.name,
                description=request.description,
                country=request.country,
                industry=request.industry,
                website=request.website,
                founded_year=request.founded_year,
                employees_count=request.employees_count
            )

            context.set_code(grpc.StatusCode.OK)
            return organization__pb2.OrganizationResponse(**org._asdict())

    def UpdateOrganization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteOrganization(self, request, context):
        session = next(get_session())
        with session:
            OrganizationController(session).delete_organization(request.id)
            context.set_code(grpc.StatusCode.OK)
            return google_dot_protobuf_dot_empty__pb2.Empty()

    def FindOrganization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrganizationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOrganizationsAsList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrganizationsAsList,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=organization__pb2.OrganizationResponseList.SerializeToString,
            ),
            'GetOrganizationsAsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetOrganizationsAsStream,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=organization__pb2.OrganizationResponse.SerializeToString,
            ),
            'GetOrganizationById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrganizationById,
                    request_deserializer=organization__pb2.GetOrganizationByIdRequest.FromString,
                    response_serializer=organization__pb2.OrganizationResponse.SerializeToString,
            ),
            'CreateOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrganization,
                    request_deserializer=organization__pb2.CreateOrganizationRequest.FromString,
                    response_serializer=organization__pb2.OrganizationResponse.SerializeToString,
            ),
            'UpdateOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrganization,
                    request_deserializer=organization__pb2.UpdateOrganizationRequest.FromString,
                    response_serializer=organization__pb2.OrganizationResponse.SerializeToString,
            ),
            'DeleteOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteOrganization,
                    request_deserializer=organization__pb2.DeleteOrganizationRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'FindOrganization': grpc.unary_stream_rpc_method_handler(
                    servicer.FindOrganization,
                    request_deserializer=organization__pb2.FindOrganizationRequest.FromString,
                    response_serializer=organization__pb2.OrganizationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OrganizationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrganizationService(object):
    """Services
    """

    @staticmethod
    def GetOrganizationsAsList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrganizationService/GetOrganizationsAsList',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            organization__pb2.OrganizationResponseList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrganizationsAsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/OrganizationService/GetOrganizationsAsStream',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            organization__pb2.OrganizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrganizationById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrganizationService/GetOrganizationById',
            organization__pb2.GetOrganizationByIdRequest.SerializeToString,
            organization__pb2.OrganizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrganizationService/CreateOrganization',
            organization__pb2.CreateOrganizationRequest.SerializeToString,
            organization__pb2.OrganizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrganizationService/UpdateOrganization',
            organization__pb2.UpdateOrganizationRequest.SerializeToString,
            organization__pb2.OrganizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrganizationService/DeleteOrganization',
            organization__pb2.DeleteOrganizationRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/OrganizationService/FindOrganization',
            organization__pb2.FindOrganizationRequest.SerializeToString,
            organization__pb2.OrganizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
